pipeline {
    agent any
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "3.143.224.230:8081"
        NEXUS_REPOSITORY = "petclinic-maven-hosted"
        NEXUS_URL_CONTAINERS = "3.143.224.230:8085"
        NEXUS_CREDENTIAL_ID = "nexus"
        DOCKER_IMAGE_NAME = "petclinic-docker"
        DOCKER_IMAGE = ""
    }
    parameters {
        string(defaultValue: "", description: 'Parameter for artifact varsion', name: 'VERSION')
    }
    stages {
        stage("Clone code from GitHub") {
            steps {
                git branch: 'main', url: 'https://github.com/timurbabs/spring-petclinic.git'
            }
        }
        stage("Maven Build") {
            steps {
                script {
                    sh "./mvnw clean package"
                }
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

        stage("Create DockerFile") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    def data = 'FROM openjdk:11\nWORKDIR /\nCOPY ./target/'+pom.artifactId+'-'+pom.version+'.jar'+' /target/\nEXPOSE 8080\nCMD java -jar /target/'+pom.artifactId+'-'+pom.version+'.jar'
                    writeFile(file: 'Dockerfile', text: data)
                }
            }
        }
        
        stage("Create Docker Image") {
            steps {
                script {
                    DOCKER_IMAGE = docker.build(DOCKER_IMAGE_NAME)
                }
            }
        }
        stage("Upload Docker Image to Nexus") {
            steps {
                script {
                    docker.withRegistry( 'http://'+NEXUS_URL_CONTAINERS, NEXUS_CREDENTIAL_ID ) {
                        DOCKER_IMAGE.push('latest')
                    }
                }
            }
        }
        stage('Throw parameters to Deployment job'){
            steps{
                    build job: 'Deployment', wait: false, parameters: [string(name: 'VERSION', value: String.valueOf(VERSION))]
            }
        }
    }
}
